# Start from the official PHP image with Alpine
ARG DOCKER_IMAGE
FROM $DOCKER_IMAGE AS needs-squashing

LABEL maintainer="Humaid Al Mansoori"
ENV DEBIAN_FRONTEND=noninteractive

ARG PHP_VERSION
ENV PHP_VERSION=$PHP_VERSION

# Install ODBC, SQL Server drivers, and PHP extensions, clean up to reduce image size
RUN apt update && \
    apt install -y unixodbc unixodbc-dev libgssapi-krb5-2 libtool php-pear php$PHP_VERSION-dev && \
    pecl channel-update pecl.php.net && \
    pecl install sqlsrv pdo_sqlsrv && \
    printf "; priority=20\nextension=sqlsrv.so\n" > /etc/php/$PHP_VERSION/mods-available/sqlsrv.ini && \
    printf "; priority=30\nextension=pdo_sqlsrv.so\n" > /etc/php/$PHP_VERSION/mods-available/pdo_sqlsrv.ini && \
    phpenmod -v $PHP_VERSION sqlsrv pdo_sqlsrv && \
    curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - && \
    curl https://packages.microsoft.com/config/ubuntu/22.04/prod.list > /etc/apt/sources.list.d/mssql-release.list && \
    apt update && \
    ACCEPT_EULA=Y apt install -y msodbcsql18 mssql-tools18 && \
    echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bash_profile && \
    echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc && \
    . ~/.bashrc && \
    apt remove -y gnupg gcc g++ autoconf make cpp && \
    apt -y autoremove && \
    apt -y purge && \
    apt clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

FROM scratch
COPY --from=needs-squashing / /

ENV PHP_VERSION=$PHP_VERSION \
    TZ=UTC \
    NGINX_CLIENT_MAX_BODY_SIZE=1M \
    NGINX_PUBLIC_PATH=/home/docker/www/public \
    PHP_FPM_ENABLED=true \
    PHP_MAX_INPUT_TIME=300 \
    PHP_UPLOAD_MAX_FILESIZE=1M \
    PHP_POST_MAX_SIZE=1M \
    PHP_MAX_INPUT_VARS=1000 \
    PHP_MEMORY_LIMIT=128M \
    PHP_ZLIB_OUTPUT_COMPRESSION=On \
    PHP_ALLOW_URL_FOPEN=Off \
    PHP_DISPLAY_ERRORS=Off \
    PHP_CLEAR_ENV=no \
    PHP_FILE_UPLOADS=On \
    PHP_MAX_EXECUTION_TIME=30 \
    PHP_CERT_PATH='/etc/php/extras/ssl/cacert.pem' \
    CRON_ENABLED=true \
    LARAVEL_BASE_PATH=/home/docker/www \
    QUEUE_ENABLED=false \
    QUEUE_NAMES='default:1' \
    QUEUE_ENABLE_LOG=false

# Set working directory
WORKDIR /home/docker/www

# Expose the necessary port
EXPOSE 80

# Define the entrypoint
CMD ["/usr/bin/docker-entrypoint.sh"]
